<!doctype html> 
<html lang="en"> 
<head> 
	<meta charset="UTF-8" />
	<title>Septikon</title>
    <script src="//cdn.jsdelivr.net/phaser/2.2.2/phaser.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.1.0.min.js"></script>
    
    <script src="js/wall_grid.js"></script>
    <script src="js/septikon.js"></script>
    <style type="text/css">
        body {
            margin: 0;
        }
    </style>
</head>
<body>
    

<script type="text/javascript">

var game = new Phaser.Game(1000, 800, Phaser.AUTO, '', { preload: preload, create: create, update: update, render: render });

function preload() { 

	Septikon.preload(game);
    
}

var wasd;
var camControl;
var cursors;
var directions;

function create() {

    game.physics.startSystem(Phaser.Physics.Arcade);
	
	Septikon.create(game);
	
	clone = Septikon.clone;
		
	  //TESTING
	var graphics = game.add.graphics(100, 100);
	graphics.beginFill(0xFF3300);
	graphics.drawRect(0, 0, 1000, 100);
	devPanel = this.game.add.sprite(0, 700, graphics.generateTexture());
	devPanel.inputEnabled = true;
    devPanel.events.onInputDown.add(Septikon.rollDice);
	graphics.destroy();
    
  
    game.helpTitle = game.add.text(50, 5, '', { fill: '#ffffff' });
    game.helpInfo = game.add.text(50, 670, '', { fill: '#dddddd' });
	game.dice = game.add.text(50, 750, 'Click to Roll (it will show in console logs)', { fill: '#dddddd' });

    tileManager = Septikon.createTiles(game);
        
    //END TESTING
    
       

    cursors = game.input.keyboard.createCursorKeys();

    this.wasd = {
        up: game.input.keyboard.addKey(Phaser.Keyboard.W),
        down: game.input.keyboard.addKey(Phaser.Keyboard.S),
        left: game.input.keyboard.addKey(Phaser.Keyboard.A),
        right: game.input.keyboard.addKey(Phaser.Keyboard.D),
    };
	
	this.camControl = {
		zoomTeam1: game.input.keyboard.addKey(Phaser.Keyboard.NUMPAD_1),
		zoomTeam2: game.input.keyboard.addKey(Phaser.Keyboard.NUMPAD_3),
		zoomFullBoard: game.input.keyboard.addKey(Phaser.Keyboard.NUMPAD_5),
		zoomLogo: game.input.keyboard.addKey(Phaser.Keyboard.NUMPAD_8),
		zoomTeam1Gunners: game.input.keyboard.addKey(Phaser.Keyboard.NUMPAD_4),
		zoomTeam2Gunners: game.input.keyboard.addKey(Phaser.Keyboard.NUMPAD_6)
	}
    
}

var movementRate = 150;
var target;
var isMoving = false;

function update() {
    var direction;
	
    if (this.wasd.left.isDown && !this.isMovingX)
    {
		if(Septikon.group.angle == -90){
			Septikon.clone.y -=3;
		}
		else if (Septikon.group.angle == 90){
			Septikon.clone.y +=3;
		}
		else {
			Septikon.clone.x -=3;
		}
		
        if(Septikon.checkWall(direction, clone.xCoord, clone.yCoord)) {
            this.isMoving = true;
            this.previous = Septikon.clone.body.x;
            //this.targetX = this.previousX-29;
            //Septikon.clone.xCoord--;
        }
    }
    else if (this.wasd.right.isDown && !this.isMovingX)
    {
 		if(Septikon.group.angle == -90){
			Septikon.clone.y +=3;
			direction = "North";}
		else if (Septikon.group.angle == 90){
			Septikon.clone.y -=3;
			direction = "South";}
		else{
			Septikon.clone.x +=3;
			direction = "East";}
       //if(Septikon.checkWall("East", clone.xCoord, clone.yCoord)) {
            //this.isMovingX = true;
            //this.previousX = clone.body.x;
            //this.targetX = this.previousX+29;
            //clone.xCoord++;
        //}
    }
	else if (this.wasd.up.isDown && !this.isMovingY)
    {
 		if(Septikon.group.angle == -90){
			Septikon.clone.x +=3;
			direction = "East";}
		else if (Septikon.group.angle == 90){
			Septikon.clone.x -=3;
			direction = "West";}
		else{
			Septikon.clone.y -=3;
			direction = "North";}
        //if(Septikon.checkWall("North", clone.xCoord, clone.yCoord)) {
            //this.isMovingY = true;
            //this.previousY = clone.body.y;
            //this.targetY = this.previousY-29;
            //clone.yCoord--;
        //}
    }
    else if (this.wasd.down.isDown && !this.isMovingY)
    {
 		if(Septikon.group.angle == -90){
			Septikon.clone.x -=3;
			direction = "West";}
		else if (Septikon.group.angle == 90){
			Septikon.clone.x +=3;
			direction = "East";}
		else{
			Septikon.clone.y +=3;
 			direction = "South";}
       //if(Septikon.checkWall("South", clone.xCoord, clone.yCoord)) {
            //this.isMovingY = true;
            //this.previousY = clone.body.y;
           // this.targetY = this.previousY+29;
           // clone.yCoord++;
        //}
    }
	
	if(this.camControl.zoomTeam1.isDown)
	{
		tweenTurn1 = game.add.tween(Septikon.group);
		tweenZoom1 = game.add.tween(Septikon.group.scale).to({x: 1.5,y: 1.5}, 1000, Phaser.Easing.Quadratic.InOut);
		tweenTurn1.to({x: 500, y:-50, angle:-90}, 1000, Phaser.Easing.Quadratic.InOut);
		tweenTurn1.start();
		tweenZoom1.start();
	}
	
	if(this.camControl.zoomTeam2.isDown)
	{
		tweenTurn2 = game.add.tween(Septikon.group);
		tweenZoom2 = game.add.tween(Septikon.group.scale).to({x: 1.5,y: 1.5}, 1000, Phaser.Easing.Quadratic.InOut);
		tweenTurn2.to({x: 500, y:-50, angle:90}, 1000, Phaser.Easing.Quadratic.InOut);
		tweenTurn2.start();
		tweenZoom2.start();
	}
	
	if(this.camControl.zoomTeam1Gunners.isDown)
	{
		tweenTurn1 = game.add.tween(Septikon.group);
		tweenZoom1 = game.add.tween(Septikon.group.scale).to({x: 1.1,y: 1.1}, 1000, Phaser.Easing.Quadratic.InOut);
		tweenTurn1.to({x: 480, y:350, angle:0}, 1000, Phaser.Easing.Quadratic.InOut);
		tweenTurn1.start();
		tweenZoom1.start();
	}
	
	if(this.camControl.zoomTeam2Gunners.isDown)
	{
		tweenTurn1 = game.add.tween(Septikon.group);
		tweenZoom1 = game.add.tween(Septikon.group.scale).to({x: 1.1,y: 1.1}, 1000, Phaser.Easing.Quadratic.InOut);
		tweenTurn1.to({x: 520, y:350, angle:0}, 1000, Phaser.Easing.Quadratic.InOut);
		tweenTurn1.start();
		tweenZoom1.start();
	}
	
	if(this.camControl.zoomFullBoard.isDown)
	{
		tweenTurn3 = game.add.tween(Septikon.group);
		tweenZoom3 = game.add.tween(Septikon.group.scale).to({x: 1,y: 1}, 1000, Phaser.Easing.Quadratic.InOut);
		tweenTurn3.to({x: 500, y:350, angle:0}, 1000, Phaser.Easing.Quadratic.InOut);
		tweenTurn3.start();
		tweenZoom3.start();
	}

	if(this.camControl.zoomLogo.isDown)
	{
		tweenTurn3 = game.add.tween(Septikon.group);
		tweenZoom3 = game.add.tween(Septikon.group.scale).to({x: 1.75,y: 1.75}, 1000, Phaser.Easing.Quadratic.InOut);
		tweenTurn3.to({x: 500, y:350, angle:-90}, 1000, Phaser.Easing.Quadratic.InOut);
		tweenTurn3.start();
		tweenZoom3.start();
	}

    
    if(this.isMovingX) {
        //LEFT of target?
        if (this.previousX > this.targetX && clone.body.x <= this.targetX) {
            this.isMovingX = false;
        }
        else if (this.previousX < this.targetX && clone.body.x >= this.targetX) {
            this.isMovingX = false;
        }
        else if (this.previousX > this.targetX) {
            clone.body.velocity.x = -200;
        }
        else if (this.previousX < this.targetX) {
            clone.body.velocity.x = 200;
        }
    }
    if(this.isMovingY) {
        //LEFT of target?
        if (this.previousY > this.targetY && clone.body.y <= this.targetY) {
            this.isMovingY = false;
        }
        else if (this.previousY < this.targetY && clone.body.y >= this.targetY) {
            this.isMovingY = false;
        }
        else if (this.previousY > this.targetY) {
            clone.body.velocity.y = -200;
        }
        else if (this.previousY < this.targetY) {
            clone.body.velocity.y = 200;
        }
    }
	
    if (cursors.up.isDown)
    {
		if (cursors.up.shiftKey)
		{
			Septikon.group.scale.set(2);
		}
		else
		{
			Septikon.group.y += 4;
		}
    }
    else if (cursors.down.isDown)
    {
		if (cursors.down.shiftKey)
		{
			Septikon.group.scale.set(1);
		}
		else
		{
			Septikon.group.y -= 4;
		}
    }

    if (cursors.left.isDown)
    {
        if (cursors.left.shiftKey)
        {
            Septikon.group.rotation -= 0.05;
        }
        else
        {
            Septikon.group.x += 4;
        }
    }
    else if (cursors.right.isDown)
    {
        if (cursors.right.shiftKey)
        {
            Septikon.group.rotation += 0.05;
        }
        else
        {
            Septikon.group.x -= 4;
        }
    }
	
	//Septikon.worldScale = Phaser.Math.clamp(Septikon.worldScale, 0.25, 2);
	//game.world.scale.set(Septikon.worldScale);
}

function render() {

    //game.debug.cameraInfo(game.camera, 32, 32);
}
</script>

</body>
</html>
